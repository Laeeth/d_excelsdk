//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "mxlwcppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "cpp_clr_Template";
};


// registrations start here


namespace
{
XLRegistration::Arg
mxlw_GetHistoricDataFromYahooArgs[]=
{
{ "symbol"," Yahoo Symbol ","XLF_OPER"},
{ "beginDate"," Begin Date ","B"},
{ "endDate","End Date ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_GetHistoricDataFromYahoo("xlmxlw_GetHistoricDataFromYahoo",
"GetHistoricDataFromYahoo",
" Obtains historial market data from yahoo ",
LibraryName,
mxlw_GetHistoricDataFromYahooArgs,
3
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_GetHistoricDataFromYahoo(
LPXLFOPER symbola,
double beginDate,
double endDate)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper symbolb(
	(symbola));
std::string symbol(
	symbolb.AsString("symbol"));



CellMatrix result(
	mxlw_GetHistoricDataFromYahoo(
		symbol,
		beginDate,
		endDate)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_EchoDateArgs[]=
{
{ "date"," the Date ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_EchoDate("xlmxlw_EchoDate",
"EchoDate",
" Echoes Date ",
LibraryName,
mxlw_EchoDateArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_EchoDate(
double date)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


 HiResTimer t;
double result(
	mxlw_EchoDate(
		date)
	);
CellMatrix resultCells(result);
CellMatrix time(1,2);
time(0,0) = "time taken";
time(0,1) = t.elapsed();
resultCells.PushBottom(time);
return XlfOper(resultCells);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_SHA1HashArgs[]=
{
{ "value"," The data ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_SHA1Hash("xlmxlw_SHA1Hash",
"SHA1Hash",
"  Computes the SHA1 hash of the input string ",
LibraryName,
mxlw_SHA1HashArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_SHA1Hash(
LPXLFOPER valuea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valueb(
	(valuea));
std::string value(
	valueb.AsString("value"));

std::string result(
	mxlw_SHA1Hash(
		value)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

