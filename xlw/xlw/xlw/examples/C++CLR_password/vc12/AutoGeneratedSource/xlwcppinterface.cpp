//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "mxlwcppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "password_example";
};


// registrations start here


namespace
{
  XLRegistration::XLCommandRegistrationHelper
registerauthenticate("xlauthenticate",
"authenticate",
" Authenticate ",
LibraryName,
" Authenticate ");
}



extern "C"
{
int EXCEL_EXPORT
xlauthenticate()
{
EXCEL_BEGIN;
	authenticate();
EXCEL_END_CMD;
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_EchoDateArgs[]=
{
{ "date"," the Date ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_EchoDate("xlmxlw_EchoDate",
"EchoDate",
" Echoes Date ",
LibraryName,
mxlw_EchoDateArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_EchoDate(
double date)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


 HiResTimer t;
double result(
	mxlw_EchoDate(
		date)
	);
CellMatrix resultCells(result);
CellMatrix time(1,2);
time(0,0) = "time taken";
time(0,1) = t.elapsed();
resultCells.PushBottom(time);
return XlfOper(resultCells);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

void authenticate();
namespace {
	MacroCache<xlw::Open>::MacroRegistra authenticate_registra("authenticate","authenticate",authenticate);
}


//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

