//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "ObjectCachDemo";
};


// registrations start here


namespace
{
XLRegistration::Arg
CreateObjectArgs[]=
{
{ "theObject"," The Object to be cached ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCreateObject("xlCreateObject",
"CreateObject",
" Caches a CellMatrix. The first Cell must be the name ",
LibraryName,
CreateObjectArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCreateObject(
LPXLFOPER theObjecta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper theObjectb(
	(theObjecta));
CellMatrix theObject(
	theObjectb.AsCellMatrix("theObject"));

std::string result(
	CreateObject(
		theObject)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
RetrieveObjectArgs[]=
{
{ "theName"," The Name of the object ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerRetrieveObject("xlRetrieveObject",
"RetrieveObject",
" Retrieves an object from the cache ",
LibraryName,
RetrieveObjectArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlRetrieveObject(
LPXLFOPER theNamea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper theNameb(
	(theNamea));
std::string theName(
	theNameb.AsString("theName"));

CellMatrix result(
	RetrieveObject(
		theName)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CreateDiscountCurveArgs[]=
{
{ "theCurveName"," The name of the Dicsount curve ","XLF_OPER"},
{ "theDiscountCurve"," A matrix of 2 columns. First column is dates and second column is discounts ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCreateDiscountCurve("xlCreateDiscountCurve",
"CreateDiscountCurve",
" Caches a Discount Curve. The first parameter must be a the name ",
LibraryName,
CreateDiscountCurveArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCreateDiscountCurve(
LPXLFOPER theCurveNamea,
LPXLFOPER theDiscountCurvea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper theCurveNameb(
	(theCurveNamea));
std::string theCurveName(
	theCurveNameb.AsString("theCurveName"));

XlfOper theDiscountCurveb(
	(theDiscountCurvea));
MyMatrix theDiscountCurve(
	theDiscountCurveb.AsMatrix("theDiscountCurve"));

std::string result(
	CreateDiscountCurve(
		theCurveName,
		theDiscountCurve)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
RetrieveDiscountCurveArgs[]=
{
{ "theName"," The Name of the Discount Curve ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerRetrieveDiscountCurve("xlRetrieveDiscountCurve",
"RetrieveDiscountCurve",
" Retrieves a Discount Curve from the cache ",
LibraryName,
RetrieveDiscountCurveArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlRetrieveDiscountCurve(
LPXLFOPER theNamea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper theNameb(
	(theNamea));
std::string theName(
	theNameb.AsString("theName"));

MyMatrix result(
	RetrieveDiscountCurve(
		theName)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
DiscountArgs[]=
{
{ "theName"," The Name of the Discount Curve ","XLF_OPER"},
{ "theDate"," The Date ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerDiscount("xlDiscount",
"Discount",
" Gets the discount factor from the given curve ",
LibraryName,
DiscountArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlDiscount(
LPXLFOPER theNamea,
double theDate)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper theNameb(
	(theNamea));
std::string theName(
	theNameb.AsString("theName"));


double result(
	Discount(
		theName,
		theDate)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

