//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "Test.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
#include <xlw/ArgList.h>

using namespace xlw;

namespace {
const char* LibraryName = "MJDesignPatternExample";
};


// registrations start here


namespace
{
XLRegistration::Arg
PayOffEvaluationArgs[]=
{
{ "PayOffTable"," table for payoff ","XLF_OPER"},
{ "Spot"," point for evaluation ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerPayOffEvaluation("xlPayOffEvaluation",
"PayOffEvaluation",
" evaluate pay--off ",
LibraryName,
PayOffEvaluationArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlPayOffEvaluation(
LPXLFOPER PayOffTablea,
double Spot)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper PayOffTableb(
	(PayOffTablea));
CellMatrix PayOffTablec(
	PayOffTableb.AsCellMatrix("PayOffTablec"));
ArgumentList PayOffTabled(
	ArgumentList(PayOffTablec,"PayOffTabled"));
Wrapper<PayOff> PayOffTable(
	GetFromFactory<PayOff>(PayOffTabled));


 HiResTimer t;
double result(
	PayOffEvaluation(
		PayOffTable,
		Spot)
	);
CellMatrix resultCells(result);
CellMatrix time(1,2);
time(0,0) = "time taken";
time(0,1) = t.elapsed();
resultCells.PushBottom(time);
return XlfOper(resultCells);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

