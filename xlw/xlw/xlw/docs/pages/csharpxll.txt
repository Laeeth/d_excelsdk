
/*! 

\page a03_csharpxll Getting Started with C# Xlls

\section csharp C# .NET Xlls

Please post feedback to xlw-users@sourceforge.net

\section gettingstarted Getting Started

If you have installed this from the self-extracting installer
the should be in the menu a link to the examples under the xlwDotNet sub-menu. 

The \ref a03_examplecsharp "Example project" is the best place to start.

There are also a menu item for the Template Extractor which you can use to create a
new fresh xll project under the xlwDotNet sub-menu.

At this stage the most important factor to a speedy release version is feedback from the users
Please email xlw-users@lists.sourceforge.net.

\section prereqs Pre-Requisites

Developing C# XLLs with XLW requires one of the following Microsoft Visual Studio environments :
   
- MicroSoft Visual Studio 2010 with both C++ and C# installed
- MicroSoft Visual Studio 2008 with both C++ and C# installed
- MicroSoft Visual Studio 2005 with both C++ and C# installed
- Visual Studio 2008 Express Editions C++ & Visual Studio 2010 Express Editions C#
- Visual Studio 2008 Express Editions C++ & Visual Studio 2008 Express Editions C#
- Visual Studio 2005 Express Editions C++ & Visual Studio 2005 Express Editions C#

there is no support for Visual Studio 2003 or earlier and none is planned.
   
\section buildclixll Building an C# XLL with xlw

\subsection template Obtaining the Template Project
	
Obtain a template project from the xlwcppclr template extractor in the XLW submenu of Start 

\subsection naming Naming your Library
 
\section buildcsharpxll Building an XLL with xlwDotNet (C#, VisualBasic or Hybrid C#/C++) 

\subsection template Obtaining the Template Project
	
Obtain a template project from the xlwDotNet template extractor in the xlw\\XlwDotNet submenu of Start 

\subsection naming Naming your Library
  
The name of you xll addin and associated libraries, will be taken from the names of the Visual Studio Solutions NOT the
constituent Visual Studio Projects.

We will change the name in 3 places.

   i.   Change the name of your Template directory from XLL_Project to  MyLib, replacing MyLib 
        with the name of your Library.
   
   ii.  In this directory  You will find a Visual Studio Solution file called Template.sln, change the name to MyLib.sln
        replacing MyLib  with the name of your Library.

   iii. Also in this directory you will find a sub-directory Addin, in this sub directory you will see a C++ Solution file
        Template.sln ( unless you are building a Hybrid project).  
        Change the name of this to MyLib.Sln  replacing MyLib  with the name of your Library.

   iv.  You can now open with Visual Studio the original renamed Solution file (i.e the one u renamed in (ii) )
        Build this  Solution to see if everything is ok. If not check your variable XLW is set correctly.
        You may have to restart you Visual Studio.

   

\subsection adding Adding your own functions in C#

   The parameter and return types of you functions can be :

- MyMatrix
- MyArray
- double[]
- double[,]
- string
- double
- int
- CellMatrix
- ArgumentList


When you write your functions :

   i.   Decorate each function with the attribute
        [ExcelExport("function description goes here")]

   ii.  Decorate each parameter with the attribute
        [Parameter("parameter description goes here ")]

   iii. Ensure the function is public and static. Ensure that the
        method is in a Public class.

   A function would then look like this :

        [ExcelExport("returns the diff of two cell ranges")]
        public static CellMatrix DiffRange(
                 [Parameter("The first  Cell Range")] CellMatrix A,
                 [Parameter("The second Cell Range")] CellMatrix B
                   )
          {
            ....
          }
  
   
   Your functions must be Public & static and in a Public class.

 
\subsection vb Adding your own functions in VisualBasic
   
\code
    <ExcelExport("returns the diff of two cell ranges")\>
        Public Shared  DiffRange( _
                 <Parameter("The first  Cell Range")> CellMatrix A, _
                 <Parameter("The second Cell Range")> CellMatrix B  _
                   ) as xlwTypes.CellMatrix
          {
            ....
          }
\endcode


\section crashes If Your .NET Addin Just crashes Excel. 
THIS STEP SHOULD BE TAKEN CARE OF BY THE INSTALLER
	
   Some versions of Excel do not load the correct .NET Runtime.
   .NET 2.0, .NET 3.0 & .NET 3.5 are all shipped with CLR v2 (v2 of the runtime)
   An xll built by xlwDotNet requires this runtime. To force Excel to
   to load this runtime at startup there is a work around.
   Create a file called Excel.exe.config with contents :

\code   
    <?xml version="1.0"?>
    <configuration>
	<startup>
		<supportedRuntime version="v2.0.50727" />
	</startup>
    </configuration>
\endcode

   and put it in the same directory as the excel executable.
   Some other reading on this issue 

   http://stackoverflow.com/questions/436958/-net-app-config-question
   http://krgreenlee.blogspot.com/2006/01/software-running-excel-with-net-11.html
   http://msdn.microsoft.com/en-us/library/w4atty68.aspx
      
	  
\section debugging Debugging .NET xlls
   
   In the directory Addin of your XLL project along with your project file
   DotNet.csproj you may find the file DotNet.csproj.user, if not create it
   with a text editor.  In that file put the following text :
   
\code
   <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
      <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
       <StartAction>Program</StartAction>
       <StartProgram>C:\Program Files\Microsoft Office\Office10\EXCEL.EXE</StartProgram>
      </PropertyGroup>
  </Project>
\endcode
  
  But replace the  \<StartProgram\> ..... \</StartProgram\> with the path to your own
  Excel executable. If you have your C# or VB.NET project open you will need to 
  close it and reopen. Now you can set breakpoints in your .NET code and debugging will
  start Excel. When Excel is started just open your xll addin .. and you should be debugging.
  
  see this blog of you need more details
  http://through-the-interface.typepad.com/through_the_interface/2006/07/debugging_using.html
   
   
\section video Some Useful Video Clips

        Creating a C# XLL with Visual Studio 2008
	http://www.youtube.com/watch?v=1yLodcb32sI
	
	Debugging a C# XLL with Visual C# Express 2008
	http://www.youtube.com/watch?v=Obtg8iVniQQ   

*/

