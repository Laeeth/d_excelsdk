
/*! \page a04_v5upgrade XLW 5 - Upgrading from Previous Versions

\section v5_summary Summary

There are some changes required to existing projects that were driven by the need to support both 64 and 32 xlls from the same codebase.

\subsection deprecated Deprecated

The functions XlfExcel::Call XlfExcel::Call4 and XlfExcel::Call12 have been deprecated.

It is still possible to call Excel via the typed array methods, alternatively there is also 
simplified access to lots of Xlm macro function via the XlfServices class.

\subsection project Adding 64 Bit support to older Visual Studio Projects

\subsubsection easy The easy way

Start again with a new template file, definitely the easiest if you have not made too many changes to the projects settings. Just copy 
over your source files into a new template directory created with the new build.

\subsubsection hard The harder Way
<UL>
<LI>Go to configuration manager, under active solution platform select new, the select x64 for the type and leave copy setting from as win32.  
That gets you a basic x64 project.</LI>
<LI>Then on the configuration manager page make sure the active solution platform is x64 and go to the platform cell for the 
Interfacegenerator project and select edit from the drop down and delete the x64 platform for this project.</LI>
<LI>Then make sure the build checkbox is ticked for the InterfaceGenerator project for both Debug/x64 and Release/x64</LI>
<LI>You then need to go and change some project settings. </LI>
<LI>Get up the properties for the XLL project.  Select Configuration "All Configurations" and platform x64 then change 
<UL><LI>Configuration Properties/General - Output Directory \$(PlatformName)_\$(ConfigurationName)</LI>
<LI>Configuration Properties/General - Intermediate Directory \$(PlatformName)_\$(ConfigurationName)\\obj</LI>
<LI>Configuration Properties/Linker - Output File \$(OutDir)\\\$(SolutionName).xll</LI>
<LI>Configuration Properties/Linker - Additional Library Dependencies \$(XLW)\\xlw\\lib\\x64</LI></LI>
</UL></UL>

\subsection code Code Changes Required for 64-bit

The 64-bit calling convention doesn't allow the trick that enabled LPXLOPER?? pointers to be converted to the equivalent Xlfoper class in function
parameters.  For all handwritten code that will be used on 64 bit the exported functions must not use the XlfOper classes.

For example the following valid version 4 code

\code
LPXLFOPER EXCEL_EXPORT xlConcat(XlfOper xlStr1, XlfOper xlStr2) {
    EXCEL_BEGIN;
\endcode

must be converted to

\code
LPXLFOPER EXCEL_EXPORT xlConcat(LPXLFOPER inStr1, LPXLFOPER inStr2) {
    EXCEL_BEGIN;
    XlfOper xlStr1(inStr1);
    XlfOper xlStr2(inStr2);
\endcode

*/

