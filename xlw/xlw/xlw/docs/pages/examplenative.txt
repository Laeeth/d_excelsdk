
/*! 

\page a01_examplenative Native Example

You will find in the handwritten example project the file xlwExample.cpp. Let us look at
some of the code it contains. It will give you a good idea of the way you are supposed
to use the package to talk directly with Excel.

Don't forget to start by including the following header.

\dontinclude xlwExample.cpp
\skipline include

Enclose the interface function in a extern "C" block as you are going to
expose \ref IsItCpp "only C functions" to Excel. This is required so that the 
function is named properly when exported.

\skipline extern

Let us start with the function you integrate in Excel. You should start by
checking that these four recommendations hold for any C function to be
registered into Excel:
- Flag the function with the preprocessor macro EXCEL_EXPORT which currently
  evaluates to __declspec(dllexport). It tells the linker to export the
  function. Excel won't see it if you fail to do so.
- Enclose the function body between the two macros EXCEL_BEGIN and EXCEL_END.
  They hide a little memory management (see TempMemory::FreeMemory) and catch
  any exceptions that may be thrown by your function.
- Declare all function arguments (passed by Excel) as LPXLFOPER or one of the
  standard POD types of C (long, double, char *...).
- Prototype your function as returning an LPXLFOPER.

The following function takes the diameter of a circle as an argument and
computes the circumference of this circle.

\until }

Here is an other example of function to be registered. This one takes two
strings as input and returns their concatenation.

\until }

So far we've used the XlfOper class which automatically uses the appropriate type 
based on the version of Excel that you are running.  it's also possible to work 
directly with the XlfOper4 and XlfOper12 classes, here is the concatenation example
reworked with both types.

\until }
\until }

This function is a little longer. It shows how to deal with range references
and return numeric arrays. It takes a range reference and computes the average
and the variance of the population and returns it in a (1x2) array.

\skipline xlStats
\until EXCEL_END
\until }

Some functions can take a long time to compute and one might not want to give
the user interface provided by the function wizard. In order for your function
to know if it is being called from the function wizard, one can call
XlfExcel::IsCalledByFuncWiz as shown below. This last function also
demonstrates how to call a regular excel routine like xlfCall (see the file
xlcall32.h for an exhaustive list) using XLW classes. Here the function will
return the coordinates of the calling cell.

\until EXCEL_END
\until }

Here is a function which increments a counter each time it is called:

\until EXCEL_END
\until }

Finally we close the extern "C" block.

\skip xlMatrixTest12
\skip EXCEL_END_12
\skip }
\until }

The code below demonstrates how to register your functions with Excel.

\skipline namespace
\until registerNbCalls
\until ;
\skip registerMatrixTest12
\skip }
\until }

A demo Excel spreadsheet that uses the functions described above is enclosed
with the project in the xlw\\examples\\Handwritten directory

*/

