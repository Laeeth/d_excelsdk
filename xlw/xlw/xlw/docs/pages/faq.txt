
/*!

\page a07_faq Frequently Asked Questions

\section faq FAQ

These are a collection FAQs that have arisen on the mailing list.

- \ref NumArgs
- \ref FuncWiz
- \ref WhenCom
- \ref WhenNotCom
- \ref IsItCpp
- \ref Legacy
- \ref diffxlldll
- \ref sr1
- \ref netdrive

\section NumArgs How Many Arguments Are Supported For Addin Functions?

Excel 2007 (and XLW 5.0) support user defined functions with up to 255
arguments.

Excel versions up to and including 2003 have a limit of 30 function arguments.

But there are some other limist that may effect the behaviour of your functions.
- in Excel 2003 and below there is a limit of 20 arguments that can have function
wizard help.
- in Excel 2007 and above there is a limit of 245 arguments that can have function
wizard help.
- If the string containing the comma concatenated list of parameter names is longer
than 255 characters the function wizard will not work correctly for your function.

Consider using an ArgList or other method to avoid huge parameter lists. 

\section FuncWiz Why doesn't my function work in Function Wizard?

The string that passes the name of all the parameters from the xll to Excel has
a maximum length of 255 characters, if the string is longer than that xlw
will truncate the string and display a "Too many arguments for Function Wizard" message.  
However your function should still work correctly.

Consider using an ArgList or other method to avoid huge parameter lists. 

\section WhenCom When should I use COM?
The COM interface based on former OLE 2.0 offers a different approach than the
one used by the C API. A full discussion is beyond the scope of this document
and you should certainly read \ref XLSDK97. I will give though a couple of
elements to help you in your choice:
- The Excel C API is particular to Excel, don't expect to make it run with
anything else (even not MS Access). On the contrary, COM is a protocol that
goes beyond MS by now.
- The Excel C API can not persist data between calls. You will be forced to
name the variable and reference them via key strings. On the contrary, COM
allows you to build components which can store data between calls.
- In the same idea, your C API based XLL is not able to determine when to
call a callback in excel. Your XLL behaves as a dumb slave, unable to do
anything unless Excel asked it to do so. Some constraints exist with COM
but they are certainly not as drastic as those involved by the C API.

\section WhenNotCom When shouldn't I use COM?
When you only want to extend the built-in Excel functions with your own
routines. It is much faster to develop it with the C++ framework than going
through the development of a new COM component.

I also found the code much easier to debug and maintain than using COM,
where a lot goes under cover.

If performance is an issue for you, you are likely to observe a degradation
with COM and OLE due to the overhead of the protocol. It is certainly not
as big as one might think, but the C API can \e not be any slower than COM,
expecially if you manipulate plain data type like double or integer.

\section IsItCpp Is the Excel API in C or in C++?
In C. The C++ framework is actually a wrapper around the C framework that you
find in the file xlcall32.h. A lot of work is saved by using the
C++ framework. It hides much the complexity with no additional work
beyond what you would have done in any case with a bare C API. This is
particularly true with regard to character string and ranges of cells,
that are really messy to handle.

\section Legacy Isn't Excel C API a technology of the past?
This technology looks a little bit out-dated with the avenment of the
component technologies like COM, Corba, or Java beans.
On the other hand, this technique works for me and serves me very well for
what I want to do. It is still supported by Microsoft 2010 and will remain
a part of Excel as long as Excel will live according to Microsoft
(see \ref XLSDK97).

\section diffxlldll What's the difference between an xll and a dll?
You just said it: the name extension. Dlls dedicated to excel are often
renamed xll to emphasize their purpose and make them easily recognizable
by the extension pattern of the Excel file dialog box which looks by
default for xl? files.

However xlls cannot usually be used in all cases as dlls, they typically have 
a reference to xlcall32.lib which only works within excel.  It is possible to
load up functions from an xll without Excel but it will not work in all cases. 

\section sr1 Excel crashes when I run the demo xll !
Check that your are running a patched version of Excel (SR-1 or SR-2).
The original Excel97 is known to be buggy with regard to the C API. In
particular Excel causes a global protection fault after
- a call to xlCoerce on a cell containing a character string.
- a call to xlCoerce on a cell containing =ran().<p>

Special thanks to Laurent Longre for his page: \ref longre.

\section netdrive Running xlwDotNet xlls on a Network Drive
Due to the default security model of .NET xlwDotNet xlls do not work
correctly by default when running off a network drive.

It is possible to get fix this using one of the following 2 methods depending 
on which compiler you are using.

For versions less and including Visual Studio 2008 then you need to trust the
drive where you wish to place our xlls by running a command similar to the 
following from an elevated visual studio tools command line prompt:

\code
Caspol -m -ag 1.2 -url "file://f:\*" FullTrust
\endcode

replace f: by the drive or unc name of the location of your xlls.

For Visual Studio 2010 and above you must create a file Excel.exe.config
which contains the following xml 

\code
<configuration>
 <startup>    
    <supportedRuntime version="v4.0.30319"/>   
  </startup>
  <runtime>
      <loadFromRemoteSources enabled="true"/>
  </runtime>
</configuration>
\endcode

This file should be placed in the same directory as Excel.exe
 

*/

