
/*! 

\page a04_clixll Getting Started with C++/CLI Xlls

\section clixll C++/CLI Xlls


Please post feedback to xlw-users@sourceforge.net

\section gettingstarted Getting Started

If you have installed this from the self-extracting installer
the should be in the menu a link to the examples under the xlw sub-meny. 

The \ref a04_examplehybrid "Hybrib example" is probably the best 
place to start.

There are also a menu item for the Hybrid Template Extractors which you can use to create a
new fresh hybrid xll project.

At this stage the most important factor to a speedy release version is feedback from the users
Please email xlw-users@lists.sourceforge.net.

\section prereqs Pre-Requisites

Developing C++/CLI with XLW requires one of the following  environments :
  
- MicroSoft Visual Studio 2010 with C++
- MicroSoft Visual Studio 2008 with C++
- MicroSoft Visual Studio 2005 with C++
- Visual Studio 2010 Express Editions C++
- Visual Studio 2008 Express Editions C++
- Visual Studio 2005 Express Editions C++

There is no support for Visual Studio 2003 or prior and none is planned

\section buildclixll Building an XLL with xlw (C++/CLI)

\subsection template Obtaining the Template Project
	
Obtain a template project from the xlwcppclr template extractor in the XLW submenu of Start 

\subsection naming Naming your Library
 

\section crashes If Your .NET Addin Just crashes Excel. 
THIS STEP SHOULD BE TAKEN CARE OF BY THE INSTALLER
	
   Some versions of Excel do not load the correct .NET Runtime.
   .NET 2.0, .NET 3.0 & .NET 3.5 are all shipped with CLR v2 (v2 of the runtime)
   An xll built by xlwDotNet requires this runtime. To force Excel to
   to load this runtime at startup there is a work around.
   Create a file called Excel.exe.config with contents :

\code   
    <?xml version="1.0"?>
    <configuration>
	<startup>
		<supportedRuntime version="v2.0.50727" />
	</startup>
    </configuration>
\endcode

   and put it in the same directory as the excel executable.
   Some other reading on this issue 

   http://stackoverflow.com/questions/436958/-net-app-config-question
   http://krgreenlee.blogspot.com/2006/01/software-running-excel-with-net-11.html
   http://msdn.microsoft.com/en-us/library/w4atty68.aspx
      
	  
\section debugging Debugging .NET xlls
   
   In the directory Addin of your XLL project along with your project file
   DotNet.csproj you may find the file DotNet.csproj.user, if not create it
   with a text editor.  In that file put the following text :
   
\code
   <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
      <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
       <StartAction>Program</StartAction>
       <StartProgram>C:\Program Files\Microsoft Office\Office10\EXCEL.EXE</StartProgram>
      </PropertyGroup>
  </Project>
\endcode
  
  But replace the  \<StartProgram\> ..... \</StartProgram\> with the path to your own
  Excel executable. If you have your C# or VB.NET project open you will need to 
  close it and reopen. Now you can set breakpoints in your .NET code and debugging will
  start Excel. When Excel is started just open your xll addin .. and you should be debugging.
  
  see this blog of you need more details
  http://through-the-interface.typepad.com/through_the_interface/2006/07/debugging_using.html

  For hybrid projects debugging should be more straight forward.
   
   
\section video Some Useful Video Clips

	Creating a C++ XLL with Visual Studio 2008
	Creating a hybrid C++/C# XLL with 
	Visual Studio (Professional) 2008
	http://www.youtube.com/watch?v=xJmKM4dwEEU

*/

